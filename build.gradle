import org.ajoberstar.grgit.Grgit
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider

plugins {
    id 'fabric-loom' version '1.11.0-alpha.12'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.ajoberstar.grgit' version '5.0.0'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven {
        url = "https://jitpack.io"
    }
}

configurations {
    shade
    implementation.extendsFrom(shade)
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")

    testCompileOnly("org.projectlombok:lombok:1.18.38")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.38")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set(21)
}

java {
    if (JavaVersion.current() < JavaVersion.toVersion(21)) {
        toolchain.languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

tasks.register('jitpackRelease') {
    group       = 'release'
    description = 'Tag HEAD as v<version> and push it over HTTPS for JitPack.'

    doLast {
        // 1) gather credentials
        def gitUser = project.findProperty('git.username')
                ?: System.getenv('GIT_USERNAME')
                ?: System.getenv('GITHUB_ACTOR')
        def gitToken = project.findProperty('git.token')
                ?: System.getenv('GIT_TOKEN')
                ?: System.getenv('GITHUB_TOKEN')
        if (!gitUser || !gitToken) {
            throw new GradleException(
                    "Missing credentials: set GITHUB_ACTOR & GITHUB_TOKEN (or GIT_USERNAME & GIT_TOKEN)"
            )
        }

        // 2) open repo and form tag name
        def repo = Grgit.open(dir: project.rootDir)
        def tagName = "v${project.version}"

        // Set credentials for this repository
        System.setProperty('org.ajoberstar.grgit.auth.username', gitUser)
        System.setProperty('org.ajoberstar.grgit.auth.password', gitToken)

        // 3) delete remote tag if it exists
        println "üóë Deleting remote tag if exists‚Ä¶"
        try {
            repo.push(remote: 'origin', refsOrSpecs: [":refs/tags/${tagName}"])
            println "‚úî Remote tag deleted"
        } catch (ignored) {
            println "‚ÑπÔ∏è Remote tag did not exist or could not be deleted"
        }

        // 4) delete local tag if it exists
        if (repo.tag.list().any { it.name == tagName }) {
            repo.tag.remove(names: [tagName])
            println "‚úî Local tag deleted"
        }

        // 5) create the new tag
        println "üîñ Creating new tag '${tagName}'‚Ä¶"
        repo.tag.add(name: tagName, message: "Release ${tagName}")

        // 6) push the new tag
        println "üöÄ Pushing '${tagName}' to origin‚Ä¶"
        repo.push(remote: 'origin', refsOrSpecs: ["refs/tags/${tagName}"])

        println """
‚úÖ Release complete!
Use JitPack URL:
  https://jitpack.io/com/github/zOnlyKroks/MassAsmer/${tagName}/
"""
    }
}